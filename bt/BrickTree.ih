// ======================================================================== //
// Copyright 2009-2015 Intel Corporation                                    //
//                                                                          //
// Licensed under the Apache License, Version 2.0 (the "License");          //
// you may not use this file except in compliance with the License.         //
// You may obtain a copy of the License at                                  //
//                                                                          //
//     http://www.apache.org/licenses/LICENSE-2.0                           //
//                                                                          //
// Unless required by applicable law or agreed to in writing, software      //
// distributed under the License is distributed on an "AS IS" BASIS,        //
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. //
// See the License for the specific language governing permissions and      //
// limitations under the License.                                           //
// ======================================================================== //

#pragma once

#include "ospray/common/Model.ih"
// ospray
#include "ospray/math/AffineSpace.ih"
#include "ospray/geometry/Geometry.ih"

struct range1f {
    float lo, hi;
};

//! hard code right now, Need to change
struct ValueBrick{
    float value[4][4][4];
};

struct IndexBrick{
    int childID[4][4][4];
};

struct BrickInfo{
    int indexBrickID;
};


/*! \brief ispc-side implementation of the bricktree object 
 *
 * note we don't actually do anything serious on the ispc side fo this
 * object, yet, but the rest of ospray requires some ispc side object
 * to exist for any of its actors; so this 'dummy' exists mainly to be
 * able to plug it into ospray - it will actually call back to the
 * scalar c++ implementation for each sample 
*/
struct BrickTree
{
  uniform ValueBrick *valueBrick;
  uniform IndexBrick *indexBrick;
  uniform BrickInfo *brickInfo;

  uniform float avgValue;
  uniform vec2f valueRange;
  uniform vec3i validSize;
  uniform int brickSize;

  uniform unsigned int numValueBricks;
  uniform unsigned int numIndexBricks;
  uniform unsigned int numBrickInfos;

  uniform unsigned int indexBricksOfs;
  uniform unsigned int valueBricksOfs;
  uniform unsigned int indexBrickOfOfs;
};


struct BrickTreeForest{
    void* brickTreeForest;
    uniform unsigned int numTrees;
}


