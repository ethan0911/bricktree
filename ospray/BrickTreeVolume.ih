// ======================================================================== //
// Copyright 2009-2015 Intel Corporation                                    //
//                                                                          //
// Licensed under the Apache License, Version 2.0 (the "License");          //
// you may not use this file except in compliance with the License.         //
// You may obtain a copy of the License at                                  //
//                                                                          //
//     http://www.apache.org/licenses/LICENSE-2.0                           //
//                                                                          //
// Unless required by applicable law or agreed to in writing, software      //
// distributed under the License is distributed on an "AS IS" BASIS,        //
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. //
// See the License for the specific language governing permissions and      //
// limitations under the License.                                           //
// ======================================================================== //

#pragma once

#include "ospray/common/Model.ih"
// ospray
#include "ospray/math/AffineSpace.ih"
#include "ospray/geometry/Geometry.ih"

#include "../bt/BrickTree.ih"

struct range1f {
    float lo, hi;
};

/*! enum to symbolically iterate the 8 corners of an voxel */
enum { C000=0, C001,C010,C011,C100,C101,C110,C111 };

/*! \brief ispc-side implementation of the bricktree object 
 *
 * note we don't actually do anything serious on the ispc side fo this
 * object, yet, but the rest of ospray requires some ispc side object
 * to exist for any of its actors; so this 'dummy' exists mainly to be
 * able to plug it into ospray - it will actually call back to the
 * scalar c++ implementation for each sample 
*/
struct BrickTreeVolume {
    //! inherited from superclass
    Volume    super;
  
    //! pointer to the c++-side object (since we do everything scalar for now)
    void     *cppObject;
  
    //! pointer to a c++-side sampler object (maintained on cpp side
    void     *cppSampler; 

    uniform vec3i gridSize;
    uniform vec3i validSize;
    uniform int brickSize;
    uniform int blockWidth;
    uniform BrickTreeForest forest;
};

inline const int getChildBrickID(const uniform BrickTree *varying bt,
                                 int indexBrickID,
                                 varying vec3i cpos)
{
  if (indexBrickID == -1)
    return -1;

  const int cbID = bt->indexBrick[indexBrickID].childID[cpos.z][cpos.y][cpos.x];
  return cbID;
}


struct FindStack
{
  varying bool active;
  varying int32 cBrickID;
  varying int32 pBrickID;
  uniform int32 worldSpaceBrickW;
};

inline uniform FindStack *uniform pushStack(uniform FindStack *uniform stackPtr,
                                            varying int cBrickID,
                                            varying int pBrickID,
                                            uniform int wsBrickW)
{
  unmasked
  {
    stackPtr->active   = false;
    stackPtr->cBrickID  = cBrickID;
    stackPtr->pBrickID = pBrickID;
  }

  stackPtr->active           = true;
  stackPtr->worldSpaceBrickW = wsBrickW;
  return stackPtr + 1;
}
