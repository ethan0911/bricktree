// ======================================================================== //
// Copyright 2009-2015 Intel Corporation                                    //
//                                                                          //
// Licensed under the Apache License, Version 2.0 (the "License");          //
// you may not use this file except in compliance with the License.         //
// You may obtain a copy of the License at                                  //
//                                                                          //
//     http://www.apache.org/licenses/LICENSE-2.0                           //
//                                                                          //
// Unless required by applicable law or agreed to in writing, software      //
// distributed under the License is distributed on an "AS IS" BASIS,        //
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. //
// See the License for the specific language governing permissions and      //
// limitations under the License.                                           //
// ======================================================================== //

#pragma once

#include "ospray/common/Model.ih"
// ospray
#include "ospray/math/box.ih"
#include "ospray/math/AffineSpace.ih"
#include "ospray/geometry/Geometry.ih"
#include "ospray/camera/PerspectiveCamera.ih"

#include "../bt/BrickTree.ih"

struct CameraInfo
{
  PerspectiveCamera *uniform camera;
  uniform vec3f *uniform pCameraDir;
  uniform vec3f *uniform pCameraPos;
  uniform float *uniform pFovy;
};

/*! \brief ispc-side implementation of the bricktree object
 *
 * note we don't actually do anything serious on the ispc side fo this
 * object, yet, but the rest of ospray requires some ispc side object
 * to exist for any of its actors; so this 'dummy' exists mainly to be
 * able to plug it into ospray - it will actually call back to the
 * scalar c++ implementation for each sample
 */
struct BrickTreeVolume
{
  //! inherited from superclass
  Volume super;

  //! pointer to the c++-side object (since we do everything scalar for now)
  void *cppObject;

  //! pointer to a c++-side sampler object (maintained on cpp side
  void *cppSampler;

  uniform vec3i gridSize;
  uniform vec3i validSize;
  uniform int brickSize;
  uniform int blockWidth;
  uniform int depth;
  uniform float renderThreshold;

  uniform BrickTreeForest forest;
  uniform CameraInfo cameraInfo;
};


// sphere project to screen space
// http://www.iquilezles.org/www/articles/sphereproj/sphereproj.htm
// https://www.shadertoy.com/view/XdBGzd

inline float projectedSphereArea(void *uniform _self,
                                 const varying vec3f &center,
                                 const varying float &radius)
{
  BrickTreeVolume *uniform self     = (BrickTreeVolume * uniform) _self;
  PerspectiveCamera *uniform camera = self->cameraInfo.camera;
  vec3f dir                         = *self->cameraInfo.pCameraDir;
  vec3f pos                         = *self->cameraInfo.pCameraPos;
  float fovy                        = *self->cameraInfo.pFovy;

  float n = 2.0 * tan(deg2rad(30.0)) / tan(deg2rad(0.5 * fovy));

  vec3f W = normalize(dir);
  vec3f U = normalize(camera->dir_du);
  vec3f V = normalize(camera->dir_dv);

  vec3f o = make_vec3f(U.x * center.x + U.y * center.y + U.z * center.z - dot(U,pos),
                       V.x * center.x + V.y * center.y + V.z * center.z - dot(V,pos),
                       W.x * center.x + W.y * center.y + W.z * center.z - dot(W,pos));

  float r2 = radius * radius;
  float z2 = o.z * o.z;
  float l2 = dot(o, o);

  float area = -PI * n * n * r2 * sqrtf(abs((l2 - r2) / (r2 - z2))) / (r2 - z2);
  return area;
}
